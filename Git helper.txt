gitk --all&     (открыть графическую оболочку гита, чтобы посмотреть все коммиты)
ctrl + shift + c (копировать в буфер обмена) 
ctrl + shift + v (вставить из буфера обмена) 
git checkout commit-number (переключится на нужный коммит)

git status - статус файлов
git status -s - статус файлов в коротком варианте 
git log - история изменений 
git add . --renormalize
git commit -m "message" - коммит файлов
git reset --soft HEAD~2 (отменить последние 2 комита, файлы не трогает, только удаляет коммиты)
git push -f --set-upstream origin "BrancheName" (Залитие на удалённый репозиторий, после git reset --soft HEAD~2) 
git restore <file name> - востанавливает файл до момента последнего коммита
git diff - показывает изменения в файлах с последнего коммита
git diff --staged - показывает изменения в файлах подготовленных для коммита
git commit --amend - Изменение последнего коммита

ls -la - выводит список файлов в каталоге ('-l' выводит файлы и папки в виде списка, '-a' отобразить все скрытые файлы и каталоги)
cd <name directory> (change directory) - позволяет перемещаться по директориям
mkdir <name directory> - команда для создания каталога
touch <file name> - создаёт файл
start <file name> - открывает файл из командной строки

files

branches
git branch <branceName> - создание новой ветки
git checkout <branceName> (example "git checkout master") - смена ветки
git checkout -b <branceName> - создать новую ветку и переключиться на неё
git pull - подтянуть изменения с сервера в ветку

Delete Local Branch
$ git branch -d <branch_name>
$ git branch -D <branch_name>

Delete Remote Branch
$ git push <remote_name> --delete <branch_name>
$ git push <remote_name> :<branch_name>

Обьединение комитов
https://htmlacademy.ru/blog/boost/tools/how-to-squash-commits-and-why-it-is-needed
1) git cherry -v master - список различий по комитам от мастера
2) git rebase -i HEAD~5

для работы с VI
:w - сохранить док
:q - выйти из дока